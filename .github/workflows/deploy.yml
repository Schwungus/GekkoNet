name: Build and Release

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:
    name: Build ${{ matrix.os }} ${{ matrix.toolchain || '' }} (${{ matrix.build_type }}, ${{ matrix.asio }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        build_type: [static, shared]
        asio: [with_asio, no_asio]
        toolchain: [msvc, mingw]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@v4
        if: matrix.os != 'windows-latest' || matrix.toolchain == 'mingw'

      - name: Configure
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" && "${{ matrix.toolchain }}" == "msvc" ]]; then
            cmake -B build -G "Ninja" -DCMAKE_C_COMPILER=cl.exe -DCMAKE_CXX_COMPILER=cl.exe \
              -DCMAKE_BUILD_TYPE=Release \
              -DBUILD_SHARED_LIBS=${{ matrix.build_type == 'shared' && 'ON' || 'OFF' }} \
              -DNO_ASIO_BUILD=${{ matrix.asio == 'no_asio' && 'ON' || 'OFF' }}
          elif [[ "${{ matrix.os }}" == "windows-latest" && "${{ matrix.toolchain }}" == "mingw" ]]; then
            cmake -B build -G "Ninja" -DCMAKE_C_COMPILER=x86_64-w64-mingw32-gcc -DCMAKE_CXX_COMPILER=x86_64-w64-mingw32-g++ \
              -DCMAKE_BUILD_TYPE=Release \
              -DBUILD_SHARED_LIBS=${{ matrix.build_type == 'shared' && 'ON' || 'OFF' }} \
              -DNO_ASIO_BUILD=${{ matrix.asio == 'no_asio' && 'ON' || 'OFF' }}
          else
            # Linux/macOS
            cmake -B build -G "Ninja" -DCMAKE_BUILD_TYPE=Release \
              -DBUILD_SHARED_LIBS=${{ matrix.build_type == 'shared' && 'ON' || 'OFF' }} \
              -DNO_ASIO_BUILD=${{ matrix.asio == 'no_asio' && 'ON' || 'OFF' }}
          fi

      - name: Build
        shell: bash
        run: cmake --build build

      - name: Package
        shell: bash
        run: |
          mkdir -p package/${{ matrix.os }}-{${{ matrix.toolchain || 'default' }}}/{lib,include}

          if [[ "${{ matrix.os }}" == "windows-latest" && "${{ matrix.toolchain }}" == "msvc" ]]; then
            find build -type f \( -name "*.lib" -o -name "*.dll" \) -exec cp {} package/${{ matrix.os }}-msvc/lib/ \;
          elif [[ "${{ matrix.os }}" == "windows-latest" && "${{ matrix.toolchain }}" == "mingw" ]]; then
            find build -type f \( -name "*.a" -o -name "*.dll" \) -exec cp {} package/${{ matrix.os }}-mingw/lib/ \;
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            find build -type f \( -name "*.a" -o -name "*.so" \) -exec cp {} package/linux/lib/ \;
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            find build -type f \( -name "*.a" -o -name "*.dylib" \) -exec cp {} package/macos/lib/ \;
          fi

          cp GekkoLib/include/gekkonet.h package/${{ matrix.os }}-{${{ matrix.toolchain || 'default' }}}/include/ || true

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.toolchain || 'default' }}-${{ matrix.build_type }}-${{ matrix.asio }}
          path: package/

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate release tag
        run: echo "TAG=v$(date +'%Y%m%d%H%M%S')-$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Create packages
        shell: bash
        run: |
          for platform_dir in artifacts/*; do
            pkg_name=$(basename "$platform_dir")
            mkdir -p "GekkoNet-$pkg_name"
            cp -r "$platform_dir/"* "GekkoNet-$pkg_name/" || true
            if [ "$(find "GekkoNet-$pkg_name" -type f | wc -l)" -gt 0 ]; then
              tar -czf "GekkoNet-$pkg_name-Release.tar.gz" -C "GekkoNet-$pkg_name" .
            fi
          done

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          files: GekkoNet-*-Release.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docs:
    name: Documentation
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Doxygen
        run: sudo apt-get update && sudo apt-get install -y doxygen graphviz

      - name: Build docs
        run: |
          cmake -B build -DBUILD_DOCS=ON
          cmake --build build --target docs

      - name: Upload docs
        uses: actions/upload-pages-artifact@v3
        with:
          path: build/GekkoLib/docs/html
          
      - name: Deploy
        uses: actions/deploy-pages@v4
