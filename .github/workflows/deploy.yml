name: Build and Release

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:
    name: Build ${{ matrix.platform }} (${{ matrix.build_type }}, ${{ matrix.asio }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        build_type: [static, shared]
        asio: [with_asio, no_asio]
        toolchain: [msvc, mingw]
        include:
          - os: windows-latest
            platform: windows-msvc
            toolchain: msvc
          - os: windows-latest
            platform: windows-mingw
            toolchain: mingw
          - os: ubuntu-latest
            platform: linux
          - os: macos-latest
            platform: macos

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@v4
        if: matrix.os != 'windows-latest' || matrix.toolchain == 'mingw'

      - name: Configure
        shell: bash
        run: |
          if [[ "${{ matrix.toolchain }}" == "msvc" ]]; then
            cmake -B build -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release \
              -DBUILD_SHARED_LIBS=${{ matrix.build_type == 'shared' && 'ON' || 'OFF' }} \
              -DNO_ASIO_BUILD=${{ matrix.asio == 'no_asio' && 'ON' || 'OFF' }}
          elif [[ "${{ matrix.toolchain }}" == "mingw" ]]; then
            cmake -B build -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release \
              -DBUILD_SHARED_LIBS=${{ matrix.build_type == 'shared' && 'ON' || 'OFF' }} \
              -DNO_ASIO_BUILD=${{ matrix.asio == 'no_asio' && 'ON' || 'OFF' }}
          else
            cmake -B build -G "Ninja" -DCMAKE_BUILD_TYPE=Release \
              -DBUILD_SHARED_LIBS=${{ matrix.build_type == 'shared' && 'ON' || 'OFF' }} \
              -DNO_ASIO_BUILD=${{ matrix.asio == 'no_asio' && 'ON' || 'OFF' }}
          fi

      - name: Build
        run: |
          if [[ "${{ matrix.toolchain }}" == "msvc" ]]; then
            cmake --build build --config Release
          else
            cmake --build build
          fi

      - name: Package
        shell: bash
        run: |
          mkdir -p package/${{ matrix.platform }}/{lib,include}

          # Copy libraries based on platform/toolchain
          if [[ "${{ matrix.toolchain }}" == "msvc" ]]; then
            find build -type f \( -name "*.lib" -o -name "*.dll" \) -exec cp {} package/${{ matrix.platform }}/lib/ \;
          elif [[ "${{ matrix.toolchain }}" == "mingw" ]]; then
            find build -type f \( -name "*.a" -o -name "*.dll" \) -exec cp {} package/${{ matrix.platform }}/lib/ \;
          elif [[ "${{ matrix.os }}" == "linux" ]]; then
            find build -type f \( -name "*.a" -o -name "*.so" \) -exec cp {} package/${{ matrix.platform }}/lib/ \;
          elif [[ "${{ matrix.os }}" == "macos" ]]; then
            find build -type f \( -name "*.a" -o -name "*.dylib" \) -exec cp {} package/${{ matrix.platform }}/lib/ \;
          fi

          # Copy only GekkoNet.h header
          cp GekkoLib/include/gekkonet.h package/${{ matrix.platform }}/include/ || true

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.build_type }}-${{ matrix.asio }}
          path: package/

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate release tag
        run: echo "TAG=v$(date +'%Y%m%d%H%M%S')-$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Create packages
        shell: bash
        run: |
          for platform in windows-msvc windows-mingw linux macos; do
            mkdir -p "GekkoNet-$platform"
            for variant in static-with_asio static-no_asio shared-with_asio shared-no_asio; do
              ARTIFACT_DIR="artifacts/${platform}-${variant}/${platform}"
              if [ -d "$ARTIFACT_DIR" ]; then
                cp -r "$ARTIFACT_DIR/lib" "GekkoNet-$platform/" 2>/dev/null || true
                cp -r "$ARTIFACT_DIR/include" "GekkoNet-$platform/" 2>/dev/null || true
              fi
            done
            if [ "$(find "GekkoNet-$platform" -type f | wc -l)" -gt 0 ]; then
              tar -czf "GekkoNet-$platform-Release.tar.gz" -C "GekkoNet-$platform" .
            fi
          done
      
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          files: GekkoNet-*-Release.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docs:
    name: Documentation
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Doxygen
        run: sudo apt-get update && sudo apt-get install -y doxygen graphviz

      - name: Build docs
        run: |
          cmake -B build -DBUILD_DOCS=ON
          cmake --build build --target docs

      - name: Upload docs
        uses: actions/upload-pages-artifact@v3
        with:
          path: build/GekkoLib/docs/html
          
      - name: Deploy
        uses: actions/deploy-pages@v4
