name: Create Release
on:
  push:
    branches: [main]
permissions:
  contents: write
  packages: write
  deployments: write
  pages: write
  id-token: write

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        build_type: [static, shared]
        asio: [with_asio, no_asio]
        include:
          - os: windows-latest
            platform: windows
          - os: ubuntu-latest
            platform: linux
          - os: macos-latest
            platform: macos
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
      
      - name: Configure CMake
        run: |
          cmake -B build \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=out \
          -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=out \
          -DBUILD_SHARED_LIBS=${{ matrix.build_type == 'shared' && 'ON' || 'OFF' }} \
          -DNO_ASIO_BUILD=${{ matrix.asio == 'no_asio' && 'ON' || 'OFF' }} \
          .
        shell: bash
      
      - name: Build
        run: cmake --build build --config Release
        
      - name: Verify Build Output
        run: |
          if [ -d "out" ]; then
            echo "Build output:"
            find out -type f -name "*.dll" -o -name "*.so" -o -name "*.dylib" -o -name "*.lib" -o -name "*.a"
          else
            echo "ERROR: No output directory found!"
            exit 1
          fi
      
      - name: Prepare Artifacts
        run: |
          # Create platform-specific directory structure
          mkdir -p artifacts/${{ matrix.platform }}/${{ matrix.build_type }}/${{ matrix.asio }}/lib
          mkdir -p artifacts/${{ matrix.platform }}/include
          
          # Copy built libraries
          if [ -d "out" ]; then
            cp -r out/* artifacts/${{ matrix.platform }}/${{ matrix.build_type }}/${{ matrix.asio }}/lib/
          fi
          
          # Copy header files
          cp GekkoLib/include/gekkonet.h artifacts/${{ matrix.platform }}/include/
          
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.build_type }}-${{ matrix.asio }}
          path: artifacts/
          retention-days: 1

  create_release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        
      - name: Get Version
        id: version
        run: |
          echo "version=$(date +'%Y%m%d%H%M%S')-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded_artifacts
          
      - name: Prepare Release Packages
        run: |
          # Create platform-specific packages
          for platform in windows linux macos; do
            if [ -d "downloaded_artifacts/${platform}-" ]; then
              mkdir -p "GekkoNet-${platform}/include"
              
              # Copy header files (from any artifact)
              find downloaded_artifacts -name "gekkonet.h" -exec cp {} "GekkoNet-${platform}/include/" \; -quit
              
              # Copy all libraries for this platform
              for artifact_path in downloaded_artifacts/${platform}-*; do
                if [ -d "$artifact_path" ]; then
                  # Extract build type and asio from artifact name
                  artifact_name=$(basename "$artifact_path")
                  IFS='-' read -r _ build_type asio <<< "$artifact_name"
                  
                  # Copy libraries
                  lib_src="$artifact_path/$platform/$build_type/$asio/lib"
                  lib_dest="GekkoNet-${platform}/lib/${build_type}/${asio}"
                  
                  if [ -d "$lib_src" ]; then
                    mkdir -p "$lib_dest"
                    cp -r "$lib_src"/* "$lib_dest/"
                  fi
                fi
              done
              
              # Create archive
              tar -czf "GekkoNet-${platform}-Release.tar.gz" "GekkoNet-${platform}"
            fi
          done
          
          # List created archives
          ls -la *.tar.gz
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          files: GekkoNet-*-Release.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  generate_docs:
    needs: create_release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install -y doxygen graphviz

      - name: Generate Documentation
        run: |
          cmake -B build -DBUILD_DOCS=ON .
          cmake --build build --target docs

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build/docs/html
